[project]
name = "cachier"
description = "Persistent, stale-free, local and cross-machine caching for Python functions."
readme = "README.rst"
keywords = [
  "cache",
  "caching",
  "cross-machine",
  "decorator",
  "local",
  "memoization",
  "mongo",
  "persistent",
]
license = {file = "LICENSE"}
authors = [
   {name = "Shay Palachy Affek", email = 'shay.palachy@gmail.com'},
]
classifiers = [
  'Development Status :: 4 - Beta',
  'Intended Audience :: Developers',
  'License :: OSI Approved :: MIT License',
  'Programming Language :: Python',
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Other/Nonlisted Topic",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
]
dynamic = [
  "version",
]
dependencies = [
  "portalocker>=2.3.2",
  "watchdog>=2.3.1",
]
[project.urls]
Source = "https://github.com/python-cachier/cachier"
[project.scripts]
cachier = "cachier.__naim__:cli"

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "cachier._version.__version__"}

[tool.setuptools.packages.find]
where = ["."]  # list of folders that contain the packages (["."] by default)
include = ["cachier*"]  # package names should match these glob patterns (["*"] by default)
namespaces = false  # to disable scanning PEP 420 namespaces (true by default)

[build-system]
requires = [
  "setuptools",
  "wheel",
]

[tool.pytest.ini_options]
testpaths = ["cachier", "tests"]
norecursedirs=["dist", "build"]
addopts = [
    "--color=yes",
    "--cov=cachier",
    "--cov-report=term",
    "--cov-report=xml:cov.xml",
    "-r a",
    "-v",
    "-s",
]
markers = [
    "mongo: test the MongoDB core",
    "memory: test the memory core",
    "pickle: test the pickle core"
]

[tool.docformatter]
recursive = true
# some docstring start with r"""
wrap-summaries = 79
wrap-descriptions = 79
blank = true

[tool.ruff]
target-version = "py38"
line-length = 79
# Enable Pyflakes `E` and `F` codes by default.
lint.select = [
    "E",
    "W", # see: https://pypi.org/project/pycodestyle
    "F", # see: https://pypi.org/project/pyflakes
    "I", #see: https://pypi.org/project/isort/
    #"D", # see: https://pypi.org/project/pydocstyle
    #"N", # see: https://pypi.org/project/pep8-naming
    "S", # see: https://pypi.org/project/flake8-bandit
    "SIM",
    "RUF100" # alternative to yesqa
]
lint.extend-select = [
    "A",    # see: https://pypi.org/project/flake8-builtins
    "B",    # see: https://pypi.org/project/flake8-bugbear
    "C4",   # see: https://pypi.org/project/flake8-comprehensions
]
lint.ignore = [
    "E203",
    "C901",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".eggs",
    ".git",
    ".ruff_cache",
    "__pypackages__",
    "_build",
    "build",
    "dist",
]
lint.ignore-init-module-imports = true
lint.unfixable = ["F401"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "S311", "S105", "S603"]

#[tool.ruff.pydocstyle]
## Use Google-style docstrings.
#convention = "google"

#[tool.ruff.pycodestyle]
#ignore-overlong-task-comments = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10
